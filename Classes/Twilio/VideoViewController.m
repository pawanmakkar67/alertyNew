//
//  VideoViewController.m
//  ObjCVideoQuickstart
//
//  Copyright Â© 2016-2017 Twilio, Inc. All rights reserved.
//

#import "VideoViewController.h"
#import "Utils.h"
#import "NSExtensions.h"
#import "AlertySettingsMgr.h"
#import "AlertyAppDelegate.h"
#import "AudioPlayback2.h"
#import "ConverstationController.h"
#import "MobileInterface.h"

#import <TwilioVideo/TwilioVideo.h>

@interface VideoViewController () <UIScrollViewDelegate, TVIRemoteParticipantDelegate, TVIRoomDelegate, TVIVideoViewDelegate, TVICameraSourceDelegate>

#pragma mark Video SDK components

@property (nonatomic, strong) TVICameraSource *camera;
@property (nonatomic, strong) TVILocalVideoTrack *localVideoTrack;
@property (nonatomic, strong) TVILocalAudioTrack *localAudioTrack;
@property (nonatomic, strong) TVILocalDataTrack *localDataTrack;
@property (nonatomic, strong) TVIRemoteParticipant *remoteParticipant;
@property (nonatomic, weak) TVIVideoView *remoteView;
@property (nonatomic, strong) TVIRoom *room;
@property (nonatomic, strong) ConverstationController *converstationController;

#pragma mark UI Element Outlets and handles

// `TVIVideoView` created from a storyboard
@property (weak, nonatomic) IBOutlet TVIVideoView *previewView;

@property (weak, nonatomic) IBOutlet UIButton *btnVideo;
@property (weak, nonatomic) IBOutlet UIButton *btnCamera;
@property (weak, nonatomic) IBOutlet UIButton *btnMic;
@property (weak, nonatomic) IBOutlet UIActivityIndicatorView *activityIndicator;
@property (weak, nonatomic) IBOutlet UIScrollView *videoContainerView;

@property (weak, nonatomic) IBOutlet UILabel *statusTitle;
@property (weak, nonatomic) IBOutlet UILabel *statusSubtitle;
@property (weak, nonatomic) IBOutlet UIView *incomingCallView;
@property (weak, nonatomic) IBOutlet UILabel *statusIncoming;


@property (nonatomic, weak) IBOutlet UIView *connectButton;
@property (nonatomic, weak) IBOutlet UIButton *disconnectButton;
@property (nonatomic, weak) IBOutlet UIButton *micButton;
@property (nonatomic, weak) IBOutlet UILabel *roomLabel;
@property (nonatomic, weak) IBOutlet UILabel *roomLine;

@property (nonatomic, assign) BOOL endCall;
@property (nonatomic, strong) GWCall* directCall;

@end

@implementation VideoViewController

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    [self logMessage:[NSString stringWithFormat:@"TwilioVideo v%ld", (long)TwilioVideoSDK.version]];

    self.navigationItem.title = @"Video";
    
    // configure video container view
    self.videoContainerView.scrollEnabled = YES;
    self.videoContainerView.pagingEnabled = YES;
    self.videoContainerView.delegate = self;
    self.videoContainerView.showsHorizontalScrollIndicator = NO;
    self.videoContainerView.showsVerticalScrollIndicator = YES;
    self.videoContainerView.bounces = NO;
    self.videoContainerView.alwaysBounceHorizontal = NO;
    
    self.incomingCallView.hidden = (!!self.phoneNr || self.startIncomingCall);
    if (!self.phoneNr) {
        self.statusSubtitle.text = @"";
        self.statusTitle.text = @"";
    }
    self.endCall = NO;
    
    // Disconnect and mic button will be displayed when client is connected to a room.
    /*self.disconnectButton.hidden = YES;
    self.micButton.hidden = YES;
    
    self.roomTextField.autocapitalizationType = UITextAutocapitalizationTypeNone;
    self.roomTextField.delegate = self;

    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissKeyboard)];
    [self.view addGestureRecognizer:tap];*/
}

- (void) viewDidAppear:(BOOL)animated {
    [super viewDidAppear:YES];
    
    if (self.phoneNr) {
        self.statusSubtitle.text = self.recipient;
        [self startDirectCall:self.phoneNr];
        //[self resetAVSession];
        self.previewView.hidden = NO;

    } else if (self.startIncomingCall) {
        [self doConnect];
        //[self setupPublisher];
        //[self resetAVSession];
    } else {
        NSString* incomingCallText = [NSString stringWithFormat:NSLocalizedString(@"Incoming call from %@",@""), self.recipient];
        self.statusIncoming.text = incomingCallText;
        if(![AlertySettingsMgr discreteModeEnabled]){
            NSString* path = [[NSBundle mainBundle] pathForResource:@"incomingcall" ofType:@"aif"];
            [AudioPlayback2 start:path loop:YES];
        }
    }
    
    /*[[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(resumeVideo)
                                                 name:UIApplicationDidBecomeActiveNotification object:nil];*/
    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];
    
    /*if (![[[UIDevice currentDevice] model] hasPrefix:@"iPad"]) {
     [[UIApplication sharedApplication] setStatusBarHidden:YES
     withAnimation:UIStatusBarAnimationFade];
     }*/
}

- (void) viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    
    /*[[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:UIApplicationDidBecomeActiveNotification
                                                  object:nil];*/
    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];
}

#pragma mark - Public

- (IBAction)micButtonPressed:(id)sender {
    // We will toggle the mic to mute/unmute and change the title according to the user action. 
    
    if (self.localAudioTrack) {
        self.localAudioTrack.enabled = !self.localAudioTrack.isEnabled;
        self.btnMic.selected = !self.localAudioTrack.enabled;
    }
}

- (IBAction)videoButtonPressed:(id)sender {
    // We will toggle the mic to mute/unmute and change the title according to the user action.
    
    if (self.localVideoTrack) {
        self.localVideoTrack.enabled = !self.localVideoTrack.isEnabled;
        self.btnVideo.selected = !self.localVideoTrack.enabled;
    }
}

- (IBAction)flipCamera:(id)sender {
    if (self.camera.device.position == AVCaptureDevicePositionFront) {
        [self.camera selectCaptureDevice:[TVICameraSource captureDeviceForPosition:AVCaptureDevicePositionBack]];
        self.btnCamera.selected = YES;
    } else {
        [self.camera selectCaptureDevice:[TVICameraSource captureDeviceForPosition:AVCaptureDevicePositionFront]];
        self.btnCamera.selected = NO;
    }
}

- (IBAction)endCall:(id)sender {
    if (self.room) { // we already have a video
        // disconnect session
        NSLog(@"disconnecting....");
        //[self.session unpublish:_publisher error:nil];
        [self.room disconnect];
        self.room.delegate = nil;
        //self.publisher.delegate = nil;
        //self.currentSubscriber.delegate = nil;
        self.room = nil;
    }
    if (self.phoneNr && self.previewView.hidden) {
        [self cancelDirectCall:self.phoneNr];
        self.phoneNr = nil;
        return;
    }
    [self dismissControllerAnimated:YES];
}

- (void)callRejected {
    self.phoneNr = nil;
    self.incomingCallView.hidden = YES;
    self.statusTitle.text = self.recipient;
    self.statusSubtitle.text = NSLocalizedString(@"rejected the call", @"");
    [self performSelector:@selector(endCall:) withObject:nil afterDelay:5.0];
}

- (void)callEnded {
    [AudioPlayback2 stop];
    self.incomingCallView.hidden = YES;
    self.statusTitle.text = self.recipient;
    self.statusSubtitle.text = NSLocalizedString(@"ended the call", @"");
    //[self.room disconnect];
    //self.room = nil;
    //self.previewView.hidden = YES;
    self.videoContainerView.hidden = YES;
    self.previewView.hidden = YES;
    [self cleanupRemoteParticipant];
    [self performSelector:@selector(endCall:) withObject:nil afterDelay:5.0];
}

#pragma mark - Private

- (void)startPreview {
    // TVICameraCapturer is not supported with the Simulator.
    if ([PlatformUtils isSimulator]) {
        [self.previewView removeFromSuperview];
        return;
    }
    
    self.camera = [[TVICameraSource alloc] init];
    self.localVideoTrack = [TVILocalVideoTrack trackWithSource:self.camera
                                                       enabled:YES
                                                          name:@"Camera"];
    
    if (!self.localVideoTrack) {
        [self logMessage:@"Failed to add video track"];
    } else {
        // Add renderer to video track for local preview
        [self.localVideoTrack addRenderer:self.previewView];
        [self logMessage:@"Video track created"];
        [self.camera startCaptureWithDevice:[TVICameraSource captureDeviceForPosition:AVCaptureDevicePositionFront]];
    }
}

- (void)prepareLocalMedia {
    
    // We will share local audio and video when we connect to room.
    if (!self.localDataTrack) {
        self.localDataTrack = [TVILocalDataTrack trackWithOptions:nil];
    }
    
    // Create an audio track.
    if (!self.localAudioTrack) {
        self.localAudioTrack = [TVILocalAudioTrack trackWithOptions:nil
                                                            enabled:YES
                                                               name:@"Microphone"];

        if (!self.localAudioTrack) {
            [self logMessage:@"Failed to add audio track"];
        }
    }

    // Create a video track which captures from the camera.
    if (!self.localVideoTrack) {
        [self startPreview];
    }
}

- (void)doConnect {
    // Prepare local media which we will share with Room Participants.
    [self prepareLocalMedia];
    
    TVIConnectOptions *connectOptions = [TVIConnectOptions optionsWithToken:self.token
                                                                    block:^(TVIConnectOptionsBuilder * _Nonnull builder) {

        // Use the local media that we prepared earlier.
        builder.audioTracks = self.localAudioTrack ? @[ self.localAudioTrack ] : @[ ];
        builder.videoTracks = self.localVideoTrack ? @[ self.localVideoTrack ] : @[ ];
        builder.dataTracks = self.localDataTrack ? @[ self.localDataTrack ] : @[ ];
                                                                        
        // The name of the Room where the Client will attempt to connect to. Please note that if you pass an empty
        // Room `name`, the Client will create one for you. You can get the name or sid from any connected Room.
        builder.roomName = self.roomName;
    }];
    
    // Connect to the Room using the options we provided.
    self.room = [TwilioVideoSDK connectWithOptions:connectOptions delegate:self];
    
    [self logMessage:[NSString stringWithFormat:@"Attempting to conTwilioVideoSDKm %@", self.roomName]];
}

- (void)setupRemoteView {
    // Creating `TVIVideoView` programmatically
    TVIVideoView *remoteView = [[TVIVideoView alloc] init];
    
    // `TVIVideoView` supports UIViewContentModeScaleToFill, UIViewContentModeScaleAspectFill and UIViewContentModeScaleAspectFit
    // UIViewContentModeScaleAspectFit is the default mode when you create `TVIVideoView` programmatically.
    remoteView.contentMode = UIViewContentModeScaleAspectFill;
    
    [self.view insertSubview:remoteView atIndex:0];
    self.remoteView = remoteView;
    
    NSLayoutConstraint *centerX = [NSLayoutConstraint constraintWithItem:self.remoteView
                                                               attribute:NSLayoutAttributeCenterX
                                                               relatedBy:NSLayoutRelationEqual
                                                                  toItem:self.view
                                                               attribute:NSLayoutAttributeCenterX
                                                              multiplier:1
                                                                constant:0];
    [self.view addConstraint:centerX];
    NSLayoutConstraint *centerY = [NSLayoutConstraint constraintWithItem:self.remoteView
                                                               attribute:NSLayoutAttributeCenterY
                                                               relatedBy:NSLayoutRelationEqual
                                                                  toItem:self.view
                                                               attribute:NSLayoutAttributeCenterY
                                                              multiplier:1
                                                                constant:0];
    [self.view addConstraint:centerY];
    NSLayoutConstraint *width = [NSLayoutConstraint constraintWithItem:self.remoteView
                                                             attribute:NSLayoutAttributeWidth
                                                             relatedBy:NSLayoutRelationEqual
                                                                toItem:self.view
                                                             attribute:NSLayoutAttributeWidth
                                                            multiplier:1
                                                              constant:0];
    [self.view addConstraint:width];
    NSLayoutConstraint *height = [NSLayoutConstraint constraintWithItem:self.remoteView
                                                              attribute:NSLayoutAttributeHeight
                                                              relatedBy:NSLayoutRelationEqual
                                                                 toItem:self.view
                                                              attribute:NSLayoutAttributeHeight
                                                             multiplier:1
                                                               constant:0];
    [self.view addConstraint:height];
}

- (void)cleanupRemoteParticipant {
    if (self.remoteParticipant) {
        if ([self.remoteParticipant.videoTracks count] > 0) {
            TVIRemoteVideoTrack *videoTrack = self.remoteParticipant.remoteVideoTracks[0].remoteTrack;
            [videoTrack removeRenderer:self.remoteView];
            [self.remoteView removeFromSuperview];
        }
        self.remoteParticipant = nil;
    }
}

- (void)logMessage:(NSString *)msg {
    NSLog(@"%@", msg);
}

- (void) participantConnected {
    
    self.remoteParticipant.delegate = self;
    self.previewView.hidden = NO;
    self.incomingCallView.hidden = YES;
    self.statusSubtitle.text = @"";
    self.statusTitle.text = @"";
    
    [self.converstationController.view removeFromSuperview];
    self.converstationController = [[ConverstationController alloc] initWithNibName:@"ConverstationController" bundle:nil];
    self.converstationController.localDataTrack = self.localDataTrack;
    //[self.videoContainerView addSubview:self.converstationController.view];
    [self.videoContainerView insertSubview:self.converstationController.view belowSubview:self.incomingCallView];
    
    CGRect frame = self.videoContainerView.bounds;
    frame.size.height -= 150;
    self.converstationController.view.frame = frame;
    //self.converstationController.view.backgroundColor = [UIColor colorWithRed:0.5 green:0.0 blue:0.0 alpha:0.5];
    self.converstationController.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
}

#pragma mark - TVIRoomDelegate

- (void)didConnectToRoom:(TVIRoom *)room {
    // At the moment, this example only supports rendering one Participant at a time.
    
    [self logMessage:[NSString stringWithFormat:@"Connected to room %@ as %@", room.name, room.localParticipant.identity]];
    
    if (room.remoteParticipants.count > 0) {
        self.remoteParticipant = room.remoteParticipants[0];
        [self participantConnected];
    }
    
    [room.localParticipant publishDataTrack:self.localDataTrack];
}

- (void)room:(TVIRoom *)room didDisconnectWithError:(nullable NSError *)error {
    [self logMessage:[NSString stringWithFormat:@"Disconncted from room %@, error = %@", room.name, error]];
    
    [self cleanupRemoteParticipant];
    self.room = nil;
}

- (void)room:(TVIRoom *)room didFailToConnectWithError:(nonnull NSError *)error{
    [self logMessage:[NSString stringWithFormat:@"Failed to connect to room, error = %@", error]];
    self.room = nil;
}

- (void)room:(TVIRoom *)room participantDidConnect:(TVIRemoteParticipant *)participant {
    if (!self.remoteParticipant) {
        self.remoteParticipant = participant;
        [self participantConnected];
    }
    [self logMessage:[NSString stringWithFormat:@"Participant %@ connected with %lu audio and %lu video tracks",
                      participant.identity,
                      (unsigned long)[participant.audioTracks count],
                      (unsigned long)[participant.videoTracks count]]];
}

- (void)room:(TVIRoom *)room participantDidDisconnect:(TVIRemoteParticipant *)participant {
    if (self.remoteParticipant == participant) {
        [self cleanupRemoteParticipant];
        self.previewView.hidden = YES;
        self.statusTitle.text = self.recipient;
        self.statusSubtitle.text = NSLocalizedString(@"ended the call", @"");
        [self performSelector:@selector(endCall:) withObject:nil afterDelay:5.0];
    }
    [self logMessage:[NSString stringWithFormat:@"Room %@ participant %@ disconnected", room.name, participant.identity]];
}

#pragma mark - TVIRemoteParticipantDelegate

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didPublishVideoTrack:(TVIRemoteVideoTrackPublication *)publication {
    // Remote Participant has offered to share the video Track.
    [self logMessage:[NSString stringWithFormat:@"Participant %@ published %@ video track .",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didUnpublishVideoTrack:(TVIRemoteVideoTrackPublication *)publication {
    // Remote Participant has stopped sharing the video Track.
    [self logMessage:[NSString stringWithFormat:@"Participant %@ unpublished %@ video track.",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didPublishAudioTrack:(TVIRemoteAudioTrackPublication *)publication {
    // Remote Participant has offered to share the audio Track.
    [self logMessage:[NSString stringWithFormat:@"Participant %@ published %@ audio track.",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didUnpublishAudioTrack:(TVIRemoteAudioTrackPublication *)publication {
    // Remote Participant has stopped sharing the audio Track.
    [self logMessage:[NSString stringWithFormat:@"Participant %@ unpublished %@ audio track.",
                      participant.identity, publication.trackName]];
}

- (void)didSubscribeToVideoTrack:(TVIRemoteVideoTrack *)videoTrack publication:(TVIRemoteVideoTrackPublication *)publication forParticipant:(TVIRemoteParticipant *)participant {
    
    // We are subscribed to the remote Participant's audio Track. We will start receiving the
    // remote Participant's video frames now.
    
    [self logMessage:[NSString stringWithFormat:@"Subscribed to %@ video track for Participant %@",
                      publication.trackName, participant.identity]];
    
    if (self.remoteParticipant == participant) {
        [self setupRemoteView];
        [videoTrack addRenderer:self.remoteView];
    }
}

- (void)didUnsubscribeFromVideoTrack:(TVIRemoteVideoTrack *)videoTrack publication:(TVIRemoteVideoTrackPublication *)publication forParticipant:(TVIRemoteParticipant *)participant {
    
    // We are unsubscribed from the remote Participant's video Track. We will no longer receive the
    // remote Participant's video.
    
    [self logMessage:[NSString stringWithFormat:@"Unsubscribed from %@ video track for Participant %@",
                      publication.trackName, participant.identity]];
    
    if (self.remoteParticipant == participant) {
        [videoTrack removeRenderer:self.remoteView];
        [self.remoteView removeFromSuperview];
    }
}

- (void)didSubscribeToAudioTrack:(TVIRemoteAudioTrack *)audioTrack publication:(TVIRemoteAudioTrackPublication *)publication forParticipant:(TVIRemoteParticipant *)participant {
    
    // We are subscribed to the remote Participant's audio Track. We will start receiving the
    // remote Participant's audio now.
    
    [self logMessage:[NSString stringWithFormat:@"Subscribed to %@ audio track for Participant %@",
                      publication.trackName, participant.identity]];
}

- (void)didUnsubscribeFromAudioTrack:(TVIRemoteAudioTrack *)audioTrack publication:(TVIRemoteAudioTrackPublication *)publication forParticipant:(TVIRemoteParticipant *)participant {

    // We are unsubscribed from the remote Participant's audio Track. We will no longer receive the
    // remote Participant's audio.
    
    [self logMessage:[NSString stringWithFormat:@"Unsubscribed from %@ audio track for Participant %@",
                      publication.trackName, participant.identity]];
}

- (void)didSubscribeToDataTrack:(TVIRemoteDataTrack *)dataTrack publication:(TVIRemoteDataTrackPublication *)publication forParticipant:(TVIRemoteParticipant *)participant {
    dataTrack.delegate = self.converstationController;
    [self.converstationController.participants setObject:participant forKey:dataTrack.sid];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didEnableVideoTrack:(TVIRemoteVideoTrackPublication *)publication {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ enabled %@ video track.",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didDisableVideoTrack:(TVIRemoteVideoTrackPublication *)publication {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ disabled %@ video track.",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didEnableAudioTrack:(TVIRemoteAudioTrackPublication *)publication {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ enabled %@ audio track.",
                      participant.identity, publication.trackName]];
}

- (void)remoteParticipant:(TVIRemoteParticipant *)participant didDisableAudioTrack:(TVIRemoteAudioTrackPublication *)publication {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ disabled %@ audio track.",
                      participant.identity, publication.trackName]];
}

- (void)didFailToSubscribeToAudioTrack:(TVIRemoteAudioTrackPublication *)publication error:(NSError *)error forParticipant:(TVIRemoteParticipant *)participant {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ failed to subscribe to %@ audio track.",
                      participant.identity, publication.trackName]];
}

- (void)didFailToSubscribeToVideoTrack:(TVIRemoteVideoTrackPublication *)publication error:(NSError *)error forParticipant:(TVIRemoteParticipant *)participant {
    [self logMessage:[NSString stringWithFormat:@"Participant %@ failed to subscribe to %@ video track.",
                      participant.identity, publication.trackName]];
}

#pragma mark - TVIVideoViewDelegate

- (void)videoView:(TVIVideoView *)view videoDimensionsDidChange:(CMVideoDimensions)dimensions {
    NSLog(@"Dimensions changed to: %d x %d", dimensions.width, dimensions.height);
    [self.view setNeedsLayout];
}

#pragma mark - TVICameraSourceDelegate

/*- (void)cameraCapturer:(TVICameraCapturer *)capturer didStartWithSource:(TVICameraCaptureSource)source {
    self.previewView.mirror = (source == TVICameraCaptureSourceFrontCamera);
}*/

#pragma mark - API

- (void) startDirectCall:(NSString*) phoneNr {
    [self.activityIndicator startAnimating];
    NSString* userId = [NSString stringWithFormat:@"%ld", (long)[AlertySettingsMgr userID]];
    NSString* userName = [AlertySettingsMgr isBusinessVersion] ? [AlertySettingsMgr userNameServer] : [AlertySettingsMgr userFullName];
    
    NSString* language = [AlertyAppDelegate language];
    self.phoneNr = [self.phoneNr stringByReplacingOccurrencesOfString:@"\u00a0" withString:@""];
    NSDictionary* parameters = @{ @"userid": userId, @"lang": language, @"phone": self.phoneNr, @"name": userName,@"comment":@"" };
    [MobileInterface post:STARTDIRECTCALL_URL body:parameters completion:^(NSDictionary *result, NSString *errorMessage) {
        [NSOperationQueue.mainQueue addOperationWithBlock:^{
            [self.activityIndicator stopAnimating];
            NSLog(@"%@", result);
            if (result) {
                self.roomName = [result objectForKey:@"room"];
                self.token = [result objectForKey:@"token"];
                [self doConnect];
            }
        }];
    }];
}

- (void) cancelDirectCall:(NSString*) phoneNr {
    [self.activityIndicator startAnimating];
    NSString* userId = [NSString stringWithFormat:@"%ld", (long)[AlertySettingsMgr userID]];

    NSString* userName = [AlertySettingsMgr isBusinessVersion] ? [AlertySettingsMgr userNameServer] : [AlertySettingsMgr userFullName];
    self.phoneNr = [self.phoneNr stringByReplacingOccurrencesOfString:@"\u00a0" withString:@""];
    NSDictionary* parameters = @{ @"userid": userId,@"phone": self.phoneNr, @"name": userName };
    [MobileInterface post:CANCELDIRECTCALL_URL body:parameters completion:^(NSDictionary *result, NSString *errorMessage) {
        [NSOperationQueue.mainQueue addOperationWithBlock:^{
            [self.activityIndicator stopAnimating];
            [self dismissControllerAnimated:YES];
        }];
    }];
}

@end
